---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.15.0
  name: pgupgrades.postgres-operator.crunchydata.com
spec:
  group: postgres-operator.crunchydata.com
  names:
    kind: PGUpgrade
    listKind: PGUpgradeList
    plural: pgupgrades
    singular: pgupgrade
  scope: Namespaced
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        description: PGUpgrade is the Schema for the pgupgrades API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: PGUpgradeSpec defines the desired state of PGUpgrade
            properties:
              affinity:
                $ref: '#/definitions/k8s.io~1api~1core~1v1~0Affinity'
                description: |-
                  Scheduling constraints of the PGUpgrade pod.
                  More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node
              fromPostgresVersion:
                description: The major version of PostgreSQL before the upgrade.
                maximum: 16
                minimum: 10
                type: integer
              image:
                description: The image name to use for major PostgreSQL upgrades.
                type: string
              imagePullPolicy:
                $ref: '#/definitions/k8s.io~1api~1core~1v1~0PullPolicy'
                description: |-
                  ImagePullPolicy is used to determine when Kubernetes will attempt to
                  pull (download) container images.
                  More info: https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy
                enum:
                - Always
                - Never
                - IfNotPresent
              imagePullSecrets:
                description: |-
                  The image pull secrets used to pull from a private registry.
                  Changing this value causes all running PGUpgrade pods to restart.
                  https://k8s.io/docs/tasks/configure-pod-container/pull-image-private-registry/
                items:
                  $ref: '#/definitions/k8s.io~1api~1core~1v1~0LocalObjectReference'
                type: array
              initContainers:
                description: Init container to run before the upgrade container.
                items:
                  $ref: '#/definitions/k8s.io~1api~1core~1v1~0Container'
                type: array
              metadata:
                description: Metadata contains metadata for custom resources
                properties:
                  annotations:
                    additionalProperties:
                      type: string
                    type: object
                  labels:
                    additionalProperties:
                      type: string
                    type: object
                type: object
              postgresClusterName:
                description: The name of the cluster to be updated
                minLength: 1
                type: string
              priorityClassName:
                description: |-
                  Priority class name for the PGUpgrade pod. Changing this
                  value causes PGUpgrade pod to restart.
                  More info: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/
                type: string
              resources:
                $ref: '#/definitions/k8s.io~1api~1core~1v1~0ResourceRequirements'
                description: Resource requirements for the PGUpgrade container.
              toPostgresImage:
                description: |-
                  The image name to use for PostgreSQL containers after upgrade.
                  When omitted, the value comes from an operator environment variable.
                type: string
              toPostgresVersion:
                description: The major version of PostgreSQL to be upgraded to.
                maximum: 16
                minimum: 10
                type: integer
              tolerations:
                description: |-
                  Tolerations of the PGUpgrade pod.
                  More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration
                items:
                  $ref: '#/definitions/k8s.io~1api~1core~1v1~0Toleration'
                type: array
              volumeMounts:
                description: The list of volume mounts to mount to upgrade pod.
                items:
                  $ref: '#/definitions/k8s.io~1api~1core~1v1~0VolumeMount'
                type: array
            required:
            - fromPostgresVersion
            - postgresClusterName
            - toPostgresVersion
            type: object
          status:
            description: PGUpgradeStatus defines the observed state of PGUpgrade
            properties:
              conditions:
                description: conditions represent the observations of PGUpgrade's
                  current state.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource.\n---\nThis struct is intended for
                    direct use as an array at the field path .status.conditions.  For
                    example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                    observations of a foo's current state.\n\t    // Known .status.conditions.type
                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                    +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                    \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                    \   // other fields\n\t}"
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
              observedGeneration:
                description: observedGeneration represents the .metadata.generation
                  on which the status was based.
                format: int64
                minimum: 0
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
